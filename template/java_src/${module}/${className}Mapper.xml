<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>
<#assign namespace>${className}.</#assign>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<#macro mapperEl value type>${r"#"}${value}:${type?upper_case}${r"#"}</#macro>
<mapper namespace="${basepackage}.${module}.dao.${className}Dao">
	<resultMap type="${basepackage}.${module}.model.${className}" id="BaseResultMap">
		<#list table.columns as column>
        <result property="${column.columnNameFirstLower}" column="${column.sqlName}" javaType="${column.simpleJavaType}"/>
		</#list>
	</resultMap>
	
	<sql id="full-columns" >
		<#list table.columns as column>
        t.${column.sqlName}<#if column_has_next>,</#if>
        </#list>
	</sql>
		
	<select id="get" parameterType="${table.getPkColumn().javaType}" resultMap="BaseResultMap">
		SELECT <include refid="full-columns" />  
		FROM ${table.sqlName} t
		WHERE t.${table.getPkColumn().sqlName} =  ${r'#{value}'}
	</select>

	<insert id="save" parameterType="${basepackage}.${module}.model.${className}">
		INSERT INTO ${table.sqlName}(
			<#list table.notPkColumns as column>
	            ${column.sqlName} <#if column_has_next>,</#if>
	        </#list>
		)
		VALUES (
			<#list table.notPkColumns as column>
	        	${r'#{'}${column.columnNameFirstLower}}<#if column_has_next>,</#if>
	        </#list>
		)
		<selectKey resultType="${table.getPkColumn().javaType}" keyProperty="${table.getPkColumn().columnNameFirstLower}">
			SELECT LAST_INSERT_ID() AS ${table.getPkColumn().sqlName}
        </selectKey>
	</insert>

	<update id="update" parameterType="${basepackage}.${module}.model.${className}">
		UPDATE ${table.sqlName}  
		<set>
	    <#list table.notPkColumns as column>
			${column.sqlName} = ${r'#{'}${column.columnNameFirstLower}},
	    </#list>
        </set>
		WHERE  ${table.getPkColumn().sqlName} =  ${r'#{'}${table.getPkColumn().columnNameFirstLower}}
	</update>
	
	<update id="updateBySelective" parameterType="${basepackage}.${module}.model.${className}">
		UPDATE ${table.sqlName}  
		<set>
	    <#list table.notPkColumns as column>
	    	<if test="@OGNL@isNotEmpty(${column.columnNameFirstLower})">
				${column.sqlName} = ${r'#{'}${column.columnNameFirstLower}},
			</if>
	    </#list>
        </set>
		WHERE  ${table.getPkColumn().sqlName} =  ${r'#{'}${table.getPkColumn().columnNameFirstLower}}
	</update>
	
	<delete id="delete" parameterType="${table.getPkColumn().javaType}">
		DELETE FROM ${table.sqlName} WHERE  ${table.getPkColumn().sqlName} =  ${r'#{value}'}
	</delete>

	<select id="queryAll" parameterType="map" resultMap="BaseResultMap">
		SELECT <include refid="full-columns" />
	    FROM ${table.sqlName} t
		<where>
	        <#list table.columns as column>
	        <#if column.sqlTypeName?upper_case != "BLOB" && column.sqlTypeName?upper_case != "CLOB">
			<if test="@OGNL@isNotEmpty(${column.columnNameFirstLower})">
				AND t.${column.sqlName} = ${r'#{'}${column.columnNameFirstLower}}
		    </if>
	        </#if>
	        </#list>
		</where>
	</select>
	
	<insert id="insertBatch" parameterType="java.util.List" >
        INSERT INTO ${table.sqlName} (
        <#list table.notPkColumns as column>
            ${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES 
        <foreach collection="list" item="item" index="index" separator=",">
        (
        <#list table.notPkColumns as column>
        	${r'#{item.'}${column.columnNameFirstLower}}<#if column_has_next>,</#if>
        </#list>
        )
        </foreach>
	</insert>
	
	<select id="count" parameterType="map" resultType="int">
		SELECT count(1)
	    FROM ${table.sqlName} t
		<where>
	        <#list table.columns as column>
	        <#if column.sqlTypeName?upper_case != "BLOB" && column.sqlTypeName?upper_case != "CLOB">
			<if test="@OGNL@isNotEmpty(${column.columnNameFirstLower})">
				AND t.${column.sqlName} = ${r'#{'}${column.columnNameFirstLower}}
		    </if>
	        </#if>
	        </#list>
		</where>
	</select>
	
	<update id="updateByParams" >
		UPDATE ${table.sqlName}  t 
		<set>
	    	<#list table.notPkColumns as column>
		    <if test="@OGNL@isNotEmpty(model.${column.columnNameFirstLower})">
				${column.sqlName} = ${r'#{model.'}${column.columnNameFirstLower}},
			</if>
		    </#list>
	    </set>
		<where>
	        <#list table.columns as column>
	        <#if column.sqlTypeName?upper_case != "BLOB" && column.sqlTypeName?upper_case != "CLOB">
			<if test="@OGNL@isNotEmpty(params.${column.columnNameFirstLower})">
				AND t.${column.sqlName} = ${r'#{params.'}${column.columnNameFirstLower}}
		    </if>
	        </#if>
	        </#list>
		</where>
	</update>
</mapper>
